package org.aztechs157.lib.util;

public class RangeConverter {
    private final Range inputRange;
    private final Range outputRange;
    private final double scaleFactor;

    public RangeConverter(final Range inputRange, final Range outputRange) {
        this.inputRange = inputRange;
        this.outputRange = outputRange;
        this.scaleFactor = outputRange.length() / inputRange.length();
    }

    public double convert(final double inputValue) {
        // Shift to zero based input range
        final var basedInput = inputValue - inputRange.low;

        // Scale the zero based input
        final var scaled = basedInput * scaleFactor;

        // Shift from zero based to output range
        final var outputValue = scaled + outputRange.low;

        return outputValue;
    }

    public Range getInputRange() {
        return inputRange;
    }

    public Range getOutputRange() {
        return outputRange;
    }

    public double getScaleFactor() {
        return scaleFactor;
    }

    @Override
    public int hashCode() {
        // !!! AutoGenerated !!!
        final int prime = 31;
        int result = 1;
        result = prime * result + ((inputRange == null) ? 0 : inputRange.hashCode());
        result = prime * result + ((outputRange == null) ? 0 : outputRange.hashCode());
        long temp;
        temp = Double.doubleToLongBits(scaleFactor);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        // !!! AutoGenerated !!!
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        RangeConverter other = (RangeConverter) obj;
        if (inputRange == null) {
            if (other.inputRange != null)
                return false;
        } else if (!inputRange.equals(other.inputRange))
            return false;
        if (outputRange == null) {
            if (other.outputRange != null)
                return false;
        } else if (!outputRange.equals(other.outputRange))
            return false;
        if (Double.doubleToLongBits(scaleFactor) != Double.doubleToLongBits(other.scaleFactor))
            return false;
        return true;
    }

    @Override
    public String toString() {
        // !!! AutoGenerated !!!
        return "RangeConverter [inputRange=" + inputRange + ", outputRange=" + outputRange + ", scaleFactor="
                + scaleFactor + "]";
    }
}
